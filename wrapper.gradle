import java.util.regex.Pattern

settings.ext.artifact = { String directory ->
    includeArtifact(directory)
}

settings.ext.external = { String directory ->
    includeBuild(new File(rootProject.projectDir, "$currentDir/$directory"))
}

settings.ext.internal = { String directory ->
    File artifactDir = new File(rootProject.projectDir, "$currentDir/$directory")
    String artifactId = "${rootProject.name}:${artifactDir.name}"
    includeProject(artifactId, artifactDir)
}

void includeArtifact(String directory) {
    File artifactDir = new File(rootProject.projectDir, "$currentDir/$directory")
    File buildFile = new File(artifactDir, "build.gradle")
    if (!buildFile.exists()) return

    String artifactName = artifactDir.canonicalFile.name
    String artifactId = null
    try (BufferedReader reader = new BufferedReader(new FileReader(buildFile))) {
        Segment segment = Segment.ARTIFACT
        Block block = null
        String line
        while ((line = reader.readLine()) != null) {
            line = line.trim()
            if (line.isBlank()) continue

            if (segment == Segment.ARTIFACT) {
                String artifactMatch = Segment.ARTIFACT.match(line)
                if (artifactMatch != null) {
                    artifactId = artifactMatch
                    includeProject(artifactId, artifactDir)
                    segment = null
                    block = null
                }
            } else if (segment == Segment.EXAMPLE) {
                String exampleMatch = Segment.EXAMPLE.match(line)
                if (exampleMatch != null) {
                    includeExample(exampleMatch, artifactId, artifactDir)
                }
            } else if (Block.INTEROP.accept(line)) {
                segment = null
                block = Block.INTEROP
            } else if (Block.RELEASE.accept(line)) {
                segment = null
                block = Block.RELEASE
            } else if (block == Block.INTEROP) {
                if (line.startsWith("ios")) {
                    includeArtifact("$directory/include/ios")
                } else if (line.startsWith("jvm")) {
                    includeArtifact("$directory/include/jvm")
                } else if (line.startsWith("editor")) {
                    includeArtifact("$directory/include/editor")
                }
                // todo android, browser, desktop
            } else if (block == Block.RELEASE) {
                if (line.startsWith("android")) {
                    includeProject("$artifactId-android", new File(artifactDir, "assemble/$artifactName-android"))
                } else if (line.startsWith("browser")) {
                    includeProject("$artifactId-browser", new File(artifactDir, "assemble/$artifactName-browser"))
                } else if (line.startsWith("desktop")) {
                    includeProject("$artifactId-desktop", new File(artifactDir, "assemble/$artifactName-desktop"))
                } else if (line.startsWith("ios")) {
                    includeProject("$artifactId-ios", new File(artifactDir, "assemble/$artifactName-ios"))
                } else if (line.startsWith("examples")) {
                    String sandboxId = artifactId == "examples" ? "examples" : "$artifactId-examples"
                    includeProject(sandboxId, new File(artifactDir, "assemble/$artifactName-examples"))
                    if (!sandboxId.contains("desktop-")) includeProject("$artifactId-examples-desktop", new File(artifactDir, "assemble/$artifactName-examples-desktop"))
                    // todo examples-android, examples-browser, examples-ios
                } else if (line.startsWith("example")) {
                    String exampleMatch = Segment.EXAMPLE.match(line)
                    if (exampleMatch != null) {
                        includeExample(exampleMatch, artifactId, artifactDir)
                        segment = Segment.EXAMPLE
                        block = null
                    }
                }
            }
        }
    }
}

void includeExample(String exampleName, String artifactId, File artifactDir) {
    String sandboxName = artifactId.replace("-examples", "").replace("-desktop", "")
    String exampleId = artifactId.endsWith(":examples") ? "$exampleName-example" : "$sandboxName-$exampleName-example"
    includeProject(exampleId, artifactDir)
}

void includeProject(String artifactId, File artifactDir) {
    if (!artifactDir.exists()) {
        artifactDir = new File(artifactDir.parentFile.parentFile, "gen/${artifactDir.name}")
        artifactDir.mkdirs()
        new File(artifactDir, "build.gradle").text = """generated("${artifactId}")"""
    }
    if (artifactDir.canonicalPath != rootProject.projectDir.canonicalPath) {
        String path = ":$artifactId"
        include(path)
        project(path).projectDir = artifactDir
        println("$path -> $artifactDir")
    }
}

settings.ext.currentDir = "."

enum Segment {

    ARTIFACT(/^artifact.*"(.*)".*$/),
    EXAMPLE(/^example\("(\w*)".*$/);

    private Pattern pattern

    Segment(String regex) {
        pattern = Pattern.compile(regex)
    }

    boolean accept(String line) {
        return pattern.matcher(line).matches()
    }

    String match(String line) {
        Collection<Collection<String>> matches = pattern.matcher(line).findAll()
        return matches.size() != 0 ? matches[0][1] : null
    }

}

enum Block {

    INTEROP("interop"),
    RELEASE("release");

    private String name

    Block(String name) {
        this.name = name
    }

    boolean accept(String line) {
        return line.startsWith(name)
    }

}
